Employees Earning More Than Their Managers

Select e1.name as Employee from Employee e1 inner join Employee e2 ON
e1.managerId=e2.id where e1.salary>e2.salary;

-------------------------------------------------------------------------

Duplicate Emails:
Write an SQL query to report all the duplicate emails. Note that it's guaranteed that the 
email field is not NULL.

Select email as Email from Person group by email having count(email)>1

-------------------------------------------------------------------------

Customers who never order:
Write an SQL query to report all customers who never order anything.

Select Customers.name as Customers from Customers left join Orders ON
Customers.id=Orders.customerId where Orders.id is null

-------------------------------------------------------------------------

Delete Duplicate Emails:

Write an SQL query to delete all the duplicate emails, keeping only one unique email with the 
smallest id. Note that you are supposed to write a DELETE statement and not a SELECT one.

delete p1 from Person p1, Person p2 where p1.email=p2.email and p1.id>p2.id;

------------------------------------------------------------------------------

Rising Temperature:

Write an SQL query to find all dates' Id with higher temperatures compared to its previous dates 
(yesterday).

Select w1.id from Weather w1, Weather w2 where datediff(w1.recordDate,w2.recordDate)=1 
and w1.temperature>w2.temperature
-------------------------------------------------------------------------------

Find Customer Referee:
Write an SQL query to report the names of the customer that are not referred by the customer with id = 2.

Select name from Customer where referee_id!=2 or referee_id is null;   

------------------------------------------------------------------------------------------------------

Customer Placing the Largest Number of Orders:
Write an SQL query to find the customer_number for the customer who has placed the largest 
number of orders.

Select customer_number from Orders group by customer_number ORDER by count(customer_number) desc limit 1;

-------------------------------------------------------------------------------------------------------

Big Countries:

A country is big if:
it has an area of at least three million (i.e., 3000000 km2), or
it has a population of at least twenty-five million (i.e., 25000000).

Write an SQL query to report the name, population, and area of the big countries.

Select name, population, area from World where area>=3000000 or population>=25000000;

--------------------------------------------------------------------------------------------------------

Classes more than 5 students:

Write an SQL query to report all the classes that have at least five students.

Select class from Courses Group By class having count(student)>=5;

---------------------------------------------------------------------------------------------------------

Second Highest Salary:

Write an SQL query to report the second highest salary from the Employee table. 
If there is no second highest salary, the query should report null.

Select MAX(salary) as SecondHighestSalary from Employee where salary<(Select MAX(salary) from Employee);

--------------------------------------------------------------------------------------------------------

Rank Scores:

Write an SQL query to rank the scores. The ranking should be calculated according to the following rules:

The scores should be ranked from the highest to the lowest.
If there is a tie between two scores, both should have the same ranking.
After a tie, the next ranking number should be the next consecutive integer value. In other words, 
there should be no holes between ranks.

Select score, DENSE_RANK() over(ORDER BY score desc) as 'rank' from Scores;

----------------------------------------------------------------------------------------------------------

Department Highest Salary:

Write an SQL query to find employees who have the highest salary in each of the departments.

Select Department, name as "Employee", salary as "Salary" from 
(Select Department.name as 'Department', Employee.name, Employee.salary, 
Rank() over(partition by Employee.departmentId Order By Employee.salary desc) 
as rownum from Employee Join Department on Employee.departmentId=Department.id) 
as temp where rownum=1; 

---------------------------------------------------------------------------------------------------------

Consecutive Numbers:

Write an SQL query to find all numbers that appear at least three times consecutively.

Select distinct l1.num as ConsecutiveNums from Logs l1,Logs l2, Logs l3 where
l1.num=l2.num and l2.id=l1.id-1 and l3.num=l1.num and l3.id=l1.id+1; 

----------------------------------------------------------------------------------------------------------

Tree Node:

Each node in the tree can be one of three types:

"Leaf": if the node is a leaf node.
"Root": if the node is the root of the tree.
"Inner": If the node is neither a leaf node nor a root node.
Write an SQL query to report the type of each node in the tree.

Select id, 
CASE
When p_id is null then 'Root'
WHEN id in (Select p_id from tree) then 'Inner'
else 'Leaf'
end as "Type" from Tree;

------------------------------------------------------------------------------------------------------------
